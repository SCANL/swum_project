<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="Die.java"><import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

    <comment type="block" format="javadoc">/**
     * Models a playing die with sides numbered 1 to N.
     * All sides have uniform probablity of being rolled.
     *
     * @author Summer CS 307 class
     */</comment>
    <class><specifier>public</specifier> class <name>Die</name>
    <block>{   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_SIDES</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Random</name></type> <name>ourRandNumGen</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>iMyNumSides</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>iMyResult</name></decl>;</decl_stmt>
    
    
        <comment type="block" format="javadoc">/**
         * Default constructor.&lt;p&gt;
         * pre: none&lt;br&gt;
         * post: getNumSides() = DEFAULT_SIDES, getResult() = 1
         */</comment>
        <constructor><specifier>public</specifier> <name>Die</name><parameter_list>()</parameter_list>
        <block>{<block_content>   <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_SIDES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    
    
        <comment type="block" format="javadoc">/**
         * Create a Die with numSides sides&lt;p&gt;
         * pre: numSides &gt; 1&lt;br&gt;
         * post: getNumSides() = numSides, getResult() = 1&lt;br&gt;
         * An exception will be generated if the preconditions are not met
         */</comment>
        <constructor><specifier>public</specifier> <name>Die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSides</name></decl></parameter>)</parameter_list>
        <block>{<block_content>   <assert>assert <expr><name>numSides</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="string">"Violation of precondition: numSides = "</literal> <operator>+</operator> <name>numSides</name> <operator>+</operator> <literal type="string">"numSides must be greater than 1"</literal></expr>;</assert>
    
            <expr_stmt><expr><name>iMyNumSides</name> <operator>=</operator> <name>numSides</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>iMyResult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <assert>assert <expr><call><name>getResult</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>getNumSides</name><argument_list>()</argument_list></call> <operator>==</operator> <name>numSides</name></expr>;</assert>
        </block_content>}</block></constructor>
    
    
        <comment type="block" format="javadoc">/**
         * Create a Die with numSides and top side and result set to result&lt;p&gt;
         * pre: numSides &gt; 1, 1 &lt;= result &lt;= numSides&lt;br&gt;
         * post: getNumSides() = numSides, getResult() = 1&lt;br&gt;
         * An exception will be generated if the preconditions are not met
         */</comment>
        <constructor><specifier>public</specifier> <name>Die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSides</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>
        <block>{<block_content>   <assert>assert <expr><name>numSides</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;=</operator> <name>numSides</name> <operator>:</operator> <literal type="string">"Violation of precondition"</literal></expr>;</assert>
    
            <expr_stmt><expr><name>iMyNumSides</name> <operator>=</operator> <name>numSides</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>iMyResult</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    
    
        <comment type="block" format="javadoc">/**
         * roll this Die. Every side has an equal chance of being the new result&lt;p&gt;
         * pre: none&lt;br&gt;
         * post: 1 &lt;= getResult() &lt;= getNumSides()
         * return the result of the Die after the roll
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>roll</name><parameter_list>()</parameter_list>
        <block>{<block_content>   <expr_stmt><expr><name>iMyResult</name> <operator>=</operator> <call><name><name>ourRandNumGen</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>iMyNumSides</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    
            <assert>assert <expr><operator>(</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <call><name>getResult</name><argument_list>()</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>getResult</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name>getNumSides</name><argument_list>()</argument_list></call> <operator>)</operator></expr>;</assert>
    
            <return>return <expr><name>iMyResult</name></expr>;</return>
        </block_content>}</block></function>
    
    
        <comment type="block" format="javadoc">/**
         * return how many sides this Die has&lt;p&gt;
         * pre: none&lt;br&gt;
         * post: return how many sides this Die has
         * @return the number of sides on this Die
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumSides</name><parameter_list>()</parameter_list>
        <block>{<block_content>   <return>return <expr><name>iMyNumSides</name></expr>;</return> </block_content>}</block></function>
    
    
        <comment type="block" format="javadoc">/**
         * get the current result or top number of this Die&lt;p&gt;
         * pre: none&lt;br&gt;
         * post: return the number on top of this Die
         * @return the current result of this Die
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getResult</name><parameter_list>()</parameter_list>
        <block>{<block_content>   <return>return <expr><name>iMyResult</name></expr>;</return>   </block_content>}</block></function>
    
    
        <comment type="block" format="javadoc">/**
         * returns true if this Die and the parameter otherObj are equal&lt;p&gt;
         * pre: none&lt;br&gt;
         * post: return true if the parameter is a Die object with the same number of sides as this Die and currently has the same result.
         * @return true if the the two Dice are equal, false otherwise
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>otherObj</name></decl></parameter>)</parameter_list>
        <block>{<block_content>   <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>otherObj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if<condition>(<expr><name>this</name> <operator>==</operator> <name>otherObj</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>otherObj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>   <decl_stmt><decl><type><name>Die</name></type> <name>otherDie</name> <init>= <expr><operator>(</operator><name>Die</name><operator>)</operator><name>otherObj</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>iMyResult</name></name> <operator>==</operator> <name><name>otherDie</name><operator>.</operator><name>iMyResult</name></name>
                    <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>iMyNumSides</name></name> <operator>==</operator> <name><name>otherDie</name><operator>.</operator><name>iMyNumSides</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    
    
        <comment type="block" format="javadoc">/**
         * returns a String containing information about this Die&lt;p&gt;
         * pre: none&lt;br&gt;
         * post: return a String with information about the current state of this Die
         * @return: A String with the number of sides and current result of this Die
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>   <return>return <expr><literal type="string">"Num sides "</literal> <operator>+</operator> <call><name>getNumSides</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" result "</literal> <operator>+</operator> <call><name>getResult</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    
    
    }</block></class><comment type="line">// end of Die class</comment></unit>