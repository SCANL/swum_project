<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="ArrayExamples.java"><class><specifier>public</specifier> class <name>ArrayExamples</name>
    <block>{	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list>
        <block>{<block_content>	<decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>findAndPrintPairs</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bubblesort</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bubblesort</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bubblesort</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bubblesort</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    
    
        <comment type="line">// pre: list != null, list.length &gt; 0</comment>
        <comment type="line">// post: return index of minimum element of array</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findMin</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name></decl></parameter>)</parameter_list>
        <block>{<block_content>	<assert>assert <expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="string">"failed precondition"</literal></expr>;</assert>
    
            <decl_stmt><decl><type><name>int</name></type> <name>indexOfMin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>	<if_stmt><if>if<condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>list</name><index>[<expr><name>indexOfMin</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>	<expr_stmt><expr><name>indexOfMin</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
    
            <return>return <expr><name>indexOfMin</name></expr>;</return>
        </block_content>}</block></function>
    
    
        <comment type="block">/*
         *pre: list != null, newSize &gt;= 0
         *post: nothing. the method does not succeed it resizing the
         * argument
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>badResize</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newSize</name></decl></parameter>)</parameter_list>
        <block>{<block_content>	<assert>assert <expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>newSize</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="string">"failed precondition"</literal></expr>;</assert>
    
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>newSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>	<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
    
            <comment type="line">// uh oh!! Changing pointer, not pointee. This breaks the</comment>
            <comment type="line">// relationship between the parameter and argument</comment>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        </block_content>}</block></function>
    
    
        <comment type="block">/*
         *pre: list != null, newSize &gt;= 0
         *post: returns an array of size newSize. Elements from 0 to newSize - 1
         *	will be copied into the new array
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>int</name><index>[]</index></name></type> <name>goodResize</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newSize</name></decl></parameter>)</parameter_list>
        <block>{<block_content>	<assert>assert <expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>newSize</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="string">"failed precondition"</literal></expr>;</assert>
    
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>newSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>	<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
    
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    
    
        <comment type="block">/*
         *pre: list != null
         *post: prints out the indices and values of all pairs of numbers
         *in list such that list[a] + list[b] = target
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>findAndPrintPairs</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>
        <block>{<block_content>	<assert>assert <expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"failed precondition"</literal></expr>;</assert>
    
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>	<if_stmt><if>if<condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition>
                    <block>{<block_content>	<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"The two elements at indices "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" and "</literal> <operator>+</operator> <name>j</name>
                            <operator>+</operator> <literal type="string">" are "</literal> <operator>+</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">" and "</literal> <operator>+</operator> <name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="string">" add up to "</literal> <operator>+</operator> <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></function>
    
    
        <comment type="block">/*
         *pre: list != null;
         *post: sort the elements of list so that they are in ascending order
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>bubblesort</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"failed precondition"</literal></expr>;</assert>
    
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>changed</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>changed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>	<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>	<assert>assert <expr><operator>(</operator><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>:</operator> <literal type="string">"loop counter j "</literal> <operator>+</operator> <name>j</name> <operator>+</operator>
                        <literal type="string">"is out of bounds."</literal></expr>;</assert>
                    <if_stmt><if>if<condition>(<expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>list</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>	<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>list</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
    
            <assert>assert <expr><call><name>isAscending</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</assert>
        </block_content>}</block></function>
    
    
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>showList</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name></decl></parameter>)</parameter_list>
        <block>{<block_content>	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>( <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    
        <comment type="block">/* 	pre: list != null
            post: return true if list is sorted in ascedning order, false otherwise
        */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAscending</name><parameter_list>( <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>list</name></decl></parameter> )</parameter_list>
        <block>{<block_content>	<decl_stmt><decl><type><name>boolean</name></type> <name>ascending</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>( <expr><name>ascending</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name></expr> )</condition>
            <block>{<block_content>	<assert>assert <expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name></expr>;</assert>
    
                <expr_stmt><expr><name>ascending</name> <operator>=</operator> <operator>(</operator><name><name>list</name><index>[<expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>list</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
    
            <return>return <expr><name>ascending</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class></unit>