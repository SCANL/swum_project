<?xml version="1.0" encoding="iso-8859-1"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="GenericMethodtest.java"><class swum_ID="0"><specifier>public</specifier> class <name>GenericMethodTest</name> <block>{
   <comment type="line">// generic method printArray</comment>
   <function swum_ID="1"><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt; <parameter><name>E</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>printArray</name><parameter_list>( <parameter><decl><type><name><name>E</name><index>[]</index></name></type> <name>inputArray</name></decl></parameter> )</parameter_list> <block>{<block_content>
      <comment type="line">// Display array elements</comment>
      <for>for<control>(<init><decl><type><name>E</name></type> <name>element</name> <range>: <expr><name>inputArray</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>

   <function swum_ID="3"><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Create arrays of Integer, Double and Character</comment>
      <decl_stmt><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>intArray</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Double</name><index>[]</index></name></type> <name>doubleArray</name> <init>= <expr><block>{ <expr><literal type="number">1.1</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">3.3</literal></expr>, <expr><literal type="number">4.4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Character</name><index>[]</index></name></type> <name>charArray</name> <init>= <expr><block>{ <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'O'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Array integerArray contains:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printArray</name><argument_list>(<argument><expr><name>intArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// pass an Integer array</comment>

      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\nArray doubleArray contains:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printArray</name><argument_list>(<argument><expr><name>doubleArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// pass a Double array</comment>

      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\nArray characterArray contains:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printArray</name><argument_list>(<argument><expr><name>charArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// pass a Character array</comment>
   </block_content>}</block></function>
}</block></class></unit>