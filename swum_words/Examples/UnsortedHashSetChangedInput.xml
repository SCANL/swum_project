<?xml version="1.0" encoding="iso-8859-1"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="UnsortedHashSet.java"><import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
    <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Array</name></name>;</import>
    
    <class swum_ID="0"><specifier>public</specifier> class <name><name>UnsortedHashSet</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{
       
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>LOAD_FACTOR_LIMIT</name> <init>= <expr><literal type="number">0.7</literal></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>con</name></decl>;</decl_stmt>
        
        <constructor swum_ID="4"><specifier>public</specifier><name>UnsortedHashSet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>con</name>  <operator>=</operator> <operator>(</operator><name><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><index>[]</index></name><operator>)</operator><operator>(</operator><operator>new</operator> <name><name>LinkedList</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        
        <function swum_ID="5"><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>oldSize</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>con</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>con</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>con</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>con</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
                
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><literal type="number">1.0</literal> <operator>*</operator> <name>size</name> <operator>/</operator> <name><name>con</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>LOAD_FACTOR_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>resize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>oldSize</name> <operator>!=</operator> <name>size</name></expr>;</return>
        </block_content>}</block></function>
    
        <function swum_ID="8"><type><specifier>private</specifier> <name>void</name></type> <name>resize</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>UnsortedHashSet</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name><name>UnsortedHashSet</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>con</name></name> <operator>=</operator> <operator>(</operator><name><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><index>[]</index></name><operator>)</operator><operator>(</operator><operator>new</operator> <name><name>LinkedList</name><index>[<expr><name><name>con</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <for>for<control>(<init><decl><type><name>E</name></type> <name>e</name> <range>: <expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>con</name></name></expr>;</expr_stmt>
        </block_content>}</block></function>
        
        <function swum_ID="12"><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class></unit>